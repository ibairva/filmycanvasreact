{"version":3,"sources":["bg1.png","components/navbar.js","components/searchbox.js","components/searchresults.js","components/movieinfo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","state","className","href","Component","Searchbox","handleInput","onKeySearch","validateInput","inputError","type","placeholder","onChange","onKeyPress","onClick","Searchresults","searchResults","openPopup","errorMsg","map","result","imdbID","src","Poster","alt","Title","Year","Type","Movieinfo","movieData","modalIsOpen","setModalIsOpen","closePopup","id","isOpen","onRequestClose","overlayClassName","Metascore","imdbRating","imdbVotes","Rated","Released","Runtime","Genre","Director","Writer","Actors","Language","Awards","Plot","Modal","setAppElement","App","useState","userInput","setUserInput","setSearchResults","setMovieData","setErrorMsg","setInputError","myApiUrl","undefined","length","search","axios","then","data","console","log","Error","results","Search","bg1","e","input","target","value","key","clickedMovieData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6dccde94.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg1.8c7bc256.png\";","import React, { Component } from \"react\";\r\nimport \"./navbar.css\";\r\nclass Navbar extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"nav-bar\">\r\n        <div className=\"nav-logo\">\r\n          <a href=\"index.html\">\r\n            <h1 className=\"my_logo\">FilmyCanvas</h1>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"./searchbox.css\";\r\n\r\nfunction Searchbox({ handleInput, onKeySearch, validateInput, inputError }) {\r\n  return (\r\n    <div>\r\n      <div className=\"title_room\">\r\n        <h1>\r\n          Hello <span>Movie Lovers.</span> Let's hope your{\" \"}\r\n          <span> Moviehunt</span> ends here...{\" \"}\r\n        </h1>\r\n        <h2>\r\n          Search for a <span>Movie</span>!!!!\r\n        </h2>\r\n      </div>\r\n      <div className=\"search-panel\">\r\n        <div className=\"search-box\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"search-input\"\r\n            placeholder=\"Search Movie\"\r\n            onChange={handleInput}\r\n            onKeyPress={onKeySearch}\r\n          />\r\n          <a className=\"search-btn\" onClick={validateInput} href=\"#\">\r\n            <i className=\"fas fa-search\"></i>\r\n          </a>\r\n        </div>\r\n        <div className=\"blank-error\">\r\n          <span>{inputError}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Searchbox;\r\n","import React from \"react\";\r\nimport \"./searchresults.css\";\r\n\r\nfunction Searchresults({ searchResults, openPopup, errorMsg }) {\r\n  if (errorMsg !== \"\") {\r\n    return (\r\n      <section className=\"results\">\r\n        <div className=\"error\">\r\n          <span>{errorMsg}</span>\r\n        </div>\r\n      </section>\r\n    );\r\n  } else {\r\n    return (\r\n      <section className=\"results\">\r\n        {searchResults.map((result) => (\r\n          <div className=\"clearfix\" onClick={() => openPopup(result.imdbID)}>\r\n            <img\r\n              className=\"r_img\"\r\n              src={result.Poster}\r\n              alt=\"Image Not Available\"\r\n            />\r\n            <div className=\"r-details\">\r\n              <h2 className=\"r_title\">{result.Title}</h2>\r\n              <h3 className=\"r_year\">Year: {result.Year} </h3>\r\n              <h3 className=\"r_type\">Type: {result.Type}</h3>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Searchresults;\r\n","import React from \"react\";\r\nimport \"./movieinfo.css\";\r\nimport Modal from \"react-modal\";\r\n\r\nfunction Movieinfo({ movieData, modalIsOpen, setModalIsOpen, closePopup }) {\r\n  // const customStyles = {\r\n  //   content: {\r\n  //     top: \"35%\",\r\n  //     left: \"50%\",\r\n  //     right: \"auto\",\r\n  //     bottom: \"auto\",\r\n  //     marginRight: \"-50%\",\r\n  //     width: \"60%\",\r\n  //     transform: \"translate(-40%, -10%)\",\r\n  //     overflow: \"auto\",\r\n  //   },\r\n  // };\r\n\r\n  return (\r\n    <div className=\"clearfx\" id=\"info_container\">\r\n      <Modal\r\n        isOpen={modalIsOpen}\r\n        onRequestClose={() => setModalIsOpen(false)}\r\n        className=\"Modal\"\r\n        overlayClassName=\"Overlay\"\r\n      >\r\n        <div className=\"movie-details\">\r\n          <div className=\"img-ratings\">\r\n            <img\r\n              className=\"movie_img\"\r\n              src={movieData.Poster}\r\n              alt=\"Image Not Availbale\"\r\n            />\r\n            <div className=\"ratings\">\r\n              <p>\r\n                <span>Metascore: </span>\r\n                {movieData.Metascore}\r\n              </p>\r\n              <p>\r\n                <span>IMDB Rating: </span>\r\n                {movieData.imdbRating}\r\n              </p>\r\n              <p>\r\n                <span>IMDB Votes: </span>\r\n                {movieData.imdbVotes}\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div className=\"basic_info\">\r\n            <p>\r\n              <span>Title: </span>\r\n              {movieData.Title}\r\n            </p>\r\n            <p>\r\n              <span>Year: </span>\r\n              {movieData.Year}\r\n            </p>\r\n            <p>\r\n              <span>Rated: </span>\r\n              {movieData.Rated}\r\n            </p>\r\n            <p>\r\n              <span>Released: </span>\r\n              {movieData.Released}\r\n            </p>\r\n            <p>\r\n              <span>Runtime: </span>\r\n              {movieData.Runtime}\r\n            </p>\r\n            <p>\r\n              <span>Genre: </span>\r\n              {movieData.Genre}\r\n            </p>\r\n            <p>\r\n              <span>Director: </span>\r\n              {movieData.Director}\r\n            </p>\r\n            <p>\r\n              <span>Writer: </span>\r\n              {movieData.Writer}\r\n            </p>\r\n            <p>\r\n              <span>Actors: </span>\r\n              {movieData.Actors}\r\n            </p>\r\n            <p>\r\n              <span>Language: </span>\r\n              {movieData.Language}\r\n            </p>\r\n            <p>\r\n              <span>Awards: </span>\r\n              {movieData.Awards}\r\n            </p>\r\n            <p>\r\n              <span>Plot: </span>\r\n              {movieData.Plot}\r\n            </p>\r\n          </div>\r\n          <footer className=\"info-footer\">\r\n            <a className=\"close-btn\" id=\"search\" onClick={closePopup}>\r\n              <div>Close Window</div>\r\n              {/* <i className=\"far fa-times-circle\"></i> */}\r\n            </a>\r\n          </footer>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\nexport default Movieinfo;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Navbar from \"./components/navbar\";\nimport Searchbox from \"./components/searchbox\";\nimport Searchresults from \"./components/searchresults\";\nimport Movieinfo from \"./components/movieinfo\";\nimport Modal from \"react-modal\";\nimport bg1 from \"./bg1.png\";\n\nModal.setAppElement(\"#root\");\nfunction App() {\n  const [userInput, setUserInput] = useState();\n  const [searchResults, setSearchResults] = useState([]);\n  const [movieData, setMovieData] = useState({});\n  const [errorMsg, setErrorMsg] = useState();\n  const [inputError, setInputError] = useState();\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n\n  const myApiUrl = \"https://www.omdbapi.com/?apikey=39201518&\";\n\n  const handleInput = (e) => {\n    let input = e.target.value;\n    // console.log(input);\n    setUserInput(() => {\n      return input;\n    });\n  };\n\n  const onKeySearch = (e) => {\n    if (e.key === \"Enter\") {\n      validateInput();\n    }\n  };\n  const validateInput = () => {\n    setErrorMsg();\n    setInputError();\n    if (userInput === undefined || userInput.length === 0) {\n      let msg = \"Movie name cannot be blank\";\n      setInputError(msg);\n      setUserInput();\n    } else {\n      search();\n    }\n  };\n  const search = () => {\n    axios(myApiUrl + \"s=\" + userInput).then(({ data }) => {\n      // console.log(userInput);\n      console.log(data);\n      if (data.Error) {\n        let msg = \"Movie not Found.Try Again\";\n        setErrorMsg(msg);\n        setSearchResults([]);\n        setUserInput();\n      } else {\n        setErrorMsg(\"\");\n        let results = data.Search;\n        setSearchResults(results);\n      }\n    });\n    // }\n  };\n\n  const openPopup = (id) => {\n    axios(myApiUrl + \"i=\" + id).then(({ data }) => {\n      let clickedMovieData = data;\n      console.log(clickedMovieData);\n      setMovieData(clickedMovieData);\n    });\n    // console.log(movieData);\n    setModalIsOpen(true);\n  };\n\n  const closePopup = () => {\n    setModalIsOpen(false);\n    setMovieData({});\n  };\n  return (\n    <div className=\"canvas\">\n      <div className=\"wrapper\">\n        <img className=\"bg1\" src={bg1} alt=\"NA\" />\n        <Navbar />\n        <Searchbox\n          handleInput={handleInput}\n          validateInput={validateInput}\n          inputError={inputError}\n          // search={search}\n          onKeySearch={onKeySearch}\n        />\n        {/* {console.log(searchResults)}\n        {console.log(errorMsg)} */}\n        <Searchresults\n          searchResults={searchResults}\n          openPopup={openPopup}\n          errorMsg={errorMsg}\n        />\n\n        {typeof movieData.Title != \"undefined\" ? (\n          <Movieinfo\n            movieData={movieData}\n            modalIsOpen={modalIsOpen}\n            setModalIsOpen={setModalIsOpen}\n            closePopup={closePopup}\n          />\n        ) : (\n          false\n        )}\n      </div>\n      <footer className=\"main-footer\">\n        <h3>Developed By: Indrajeet</h3>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}